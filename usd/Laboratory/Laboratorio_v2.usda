#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 50000)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (42.534056802376305, 263.9874018719178, -125.33625835238865)
                double3 target = (1018.7835213123867, -16.20611848460976, -140.907397148865)
            }
            dictionary Right = {
                double3 position = (-50000, 0, 0)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (0, 50000, 0)
                double radius = 500
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary navmeshSettings = {
            double agentHeight = 180
            double agentRadius = 20
            bool excludeRigidBodies = 1
            int ver = 1
            double voxelCeiling = 460
        }
        dictionary omni_layer = {
            string authoring_layer = "./Laboratorio_v2.usda"
            dictionary locked = {
            }
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            bool "rtx:directLighting:sampledLighting:enabled" = 1
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:index:regionOfInterestMax" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMin" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_position" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_reflectivity" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_rotation_axis" = (3.4028235e38, 3.4028235e38, 3.4028235e38)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            double "rtx:post:lensFlares:flareScale" = 0.075
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0, 0, 0)
        }
    }
    defaultPrim = "World"
    endTimeCode = 100
    metersPerUnit = 0.01
    startTimeCode = 0
    timeCodesPerSecond = 60
    upAxis = "Y"
)

def Xform "World"
{
    def "Laboratorio_v2" (
        prepend payload = @./Laboratorio_v2.usd@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (100, 100, 100)
        double3 xformOp:translate = (356.5, 20, -170)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Looks"
        {
            over "Material"
            {
                over "Material"
                {
                    asset inputs:diffuse_texture = @./textures/Gotele.jpg@ (
                        customData = {
                            asset default = @@
                        }
                        hidden = false
                        renderType = "texture_2d"
                    )
                }
            }

            over "Material_002"
            {
                over "Material_002"
                {
                    asset inputs:diffuse_texture = @./textures/Tile texture final ver.png@ (
                        customData = {
                            asset default = @@
                        }
                        hidden = false
                        renderType = "texture_2d"
                    )
                    bool inputs:enable_opacity = 0 (
                        doc = """Enables the use of cutout opacity

"""
                        hidden = false
                    )
                    float inputs:metallic_constant = 0.04 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Metallic Amount"
                        doc = """Metallic Material

"""
                        hidden = false
                    )
                    float inputs:opacity_constant = 1 (
                        doc = """Opacity value between 0 and 1, when Opacity Map is not valid

"""
                        hidden = false
                    )
                    float inputs:reflection_roughness_constant = 0.19999999 (
                        customData = {
                            float default = 0.5
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Roughness Amount"
                        doc = """Higher roughness values lead to more blurry reflections

"""
                        hidden = false
                    )
                    float inputs:reflection_roughness_texture_influence = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Roughness Map Influence"
                        doc = """Blends between the constant value and the lookup of the roughness texture

"""
                        hidden = false
                    )
                    float inputs:specular_level = 0.39 (
                        customData = {
                            float default = 0.5
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Specular"
                        doc = """The specular level (intensity) of the material

"""
                        hidden = false
                    )
                }
            }

            over "material_________________001"
            {
                over "material_________________001"
                {
                    color3f inputs:diffuse_color_constant = (0.027614208, 0.27377522, 0.027614208) (
                        customData = {
                            float3 default = (0.2, 0.2, 0.2)
                        }
                        displayName = "Albedo Color"
                        doc = """This is the albedo base color

"""
                        hidden = false
                        renderType = "color"
                    )
                }
            }

            over "Douglas_001"
            {
                over "Douglas_001"
                {
                    color3f inputs:diffuse_color_constant = (0.78962535, 0.774237, 0.46649337) (
                        customData = {
                            float3 default = (0.2, 0.2, 0.2)
                        }
                        displayName = "Albedo Color"
                        doc = """This is the albedo base color

"""
                        hidden = false
                        renderType = "color"
                    )
                }
            }

            over "Wenge_dark_oak"
            {
                over "Wenge_dark_oak"
                {
                    color3f inputs:diffuse_color_constant = (0.086455345, 0.055215895, 0.013703297) (
                        customData = {
                            float3 default = (0.2, 0.2, 0.2)
                        }
                        displayName = "Albedo Color"
                        doc = """This is the albedo base color

"""
                        hidden = false
                        renderType = "color"
                    )
                }
            }

            over "wood_001"
            {
                over "wood_001"
                {
                    color3f inputs:diffuse_color_constant = (0.18039216, 0.1764706, 0.17254902) (
                        customData = {
                            float3 default = (0.2, 0.2, 0.2)
                        }
                        displayName = "Albedo Color"
                        doc = """This is the albedo base color

"""
                        hidden = false
                        renderType = "color"
                    )
                }
            }

            over "wood"
            {
                over "wood"
                {
                    color3f inputs:diffuse_color_constant = (0.18039216, 0.1764706, 0.17254902) (
                        customData = {
                            float3 default = (0.2, 0.2, 0.2)
                        }
                        displayName = "Albedo Color"
                        doc = """This is the albedo base color

"""
                        hidden = false
                        renderType = "color"
                    )
                }
            }

            over "desktop"
            {
                over "desktop"
                {
                    asset inputs:diffuse_texture = @./textures/MetaTool.png@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                }
            }

            over "Screen"
            {
                over "Screen"
                {
                    asset inputs:diffuse_texture = @./textures/MetaTool.png@ (
                        customData = {
                            asset default = @@
                        }
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float2 inputs:texture_scale = (2.9, 2.3) (
                        displayName = "Texture Tiling"
                        doc = """Controls the repetition of the texture.

"""
                        hidden = false
                    )
                    float2 inputs:texture_translate = (1.05, -0.2) (
                        doc = """Controls position of texture.

"""
                        hidden = false
                    )
                }
            }

            over "Keyboard"
            {
                over "Keyboard"
                {
                    asset inputs:diffuse_texture = @./textures/Teclado luminoso.png@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                }
            }

            over "letters_layout_001"
            {
                over "letters_layout_001"
                {
                    color3f inputs:diffuse_color_constant = (0.24495679, 0.23295602, 0.23295602) (
                        customData = {
                            float3 default = (0.2, 0.2, 0.2)
                        }
                        displayName = "Albedo Color"
                        doc = """This is the albedo base color

"""
                        hidden = false
                        renderType = "color"
                    )
                }
            }

            over "Material_056"
            {
                over "Material_056"
                {
                    color3f inputs:diffuse_color_constant = (0.000001, 9.9999e-7, 9.9999e-7) (
                        customData = {
                            float3 default = (0.2, 0.2, 0.2)
                        }
                        displayName = "Albedo Color"
                        doc = """This is the albedo base color

"""
                        hidden = false
                        renderType = "color"
                    )
                }
            }

            over "Steel___Satin"
            {
                over "Steel___Satin"
                {
                    color3f inputs:diffuse_color_constant = (0.000001, 9.9999e-7, 9.9999e-7) (
                        customData = {
                            float3 default = (0.2, 0.2, 0.2)
                        }
                        displayName = "Albedo Color"
                        doc = """This is the albedo base color

"""
                        hidden = false
                        renderType = "color"
                    )
                }
            }

            over "Chair_Metal"
            {
                over "Chair_Metal"
                {
                    color3f inputs:diffuse_color_constant = (0.000001, 9.9999e-7, 9.9999e-7) (
                        customData = {
                            float3 default = (0.2, 0.2, 0.2)
                        }
                        displayName = "Albedo Color"
                        doc = """This is the albedo base color

"""
                        hidden = false
                        renderType = "color"
                    )
                }
            }

            over "prop_laptop_lenovo_screen"
            {
                over "prop_laptop_lenovo_screen"
                {
                    asset inputs:diffuse_texture = @./textures/MetaTool.png@ (
                        customData = {
                            asset default = @@
                        }
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float2 inputs:texture_scale = (2.2, 4.2000003) (
                        displayName = "Texture Tiling"
                        doc = """Controls the repetition of the texture.

"""
                        hidden = false
                    )
                    float2 inputs:texture_translate = (-0.05, 0) (
                        doc = """Controls position of texture.

"""
                        hidden = false
                    )
                }
            }

            over "Keyboard_001"
            {
                over "Keyboard_001"
                {
                    asset inputs:diffuse_texture = @./textures/Teclado luminoso.png@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                }
            }

            over "prop_laptop_lenovo_body"
            {
                over "prop_laptop_lenovo_body"
                {
                    asset inputs:diffuse_texture = @./textures/prop_laptop_lenovo_dmap.jpg@ (
                        customData = {
                            asset default = @@
                        }
                        hidden = false
                        renderType = "texture_2d"
                    )
                }
            }

            over "Screen_001"
            {
                over "Screen_001"
                {
                    asset inputs:diffuse_texture = @./textures/MetaTool.png@ (
                        customData = {
                            asset default = @@
                        }
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float2 inputs:texture_scale = (2.8, 2.2) (
                        displayName = "Texture Tiling"
                        doc = """Controls the repetition of the texture.

"""
                        hidden = false
                    )
                    float2 inputs:texture_translate = (2.1, -0.1) (
                        doc = """Controls position of texture.

"""
                        hidden = false
                    )
                }
            }

            over "heater_metal"
            {
                over "heater_metal"
                {
                    color3f inputs:diffuse_color_constant = (0.63976943, 0.61948854, 0.61948854) (
                        customData = {
                            float3 default = (0.2, 0.2, 0.2)
                        }
                        displayName = "Albedo Color"
                        doc = """This is the albedo base color

"""
                        hidden = false
                        renderType = "color"
                    )
                    float inputs:metallic_constant = 0.5 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Metallic Amount"
                        doc = """Metallic Material

"""
                        hidden = false
                    )
                    float inputs:metallic_texture_influence = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Metallic Map Influence"
                        doc = """Blends between the constant value and the lookup of the metallic texture

"""
                        hidden = false
                    )
                }
            }

            over "Glass_04"
            {
                over "Glass_04"
                {
                    bool inputs:enable_opacity = 1 (
                        doc = """Enables the use of cutout opacity

"""
                        hidden = false
                    )
                    float inputs:opacity_constant = 0.099999994 (
                        doc = """Opacity value between 0 and 1, when Opacity Map is not valid

"""
                        hidden = false
                    )
                }
            }

            over "letters_layout"
            {
                over "letters_layout"
                {
                    color3f inputs:diffuse_color_constant = (0.3400576, 0.3400542, 0.3400542) (
                        customData = {
                            float3 default = (0.2, 0.2, 0.2)
                        }
                        displayName = "Albedo Color"
                        doc = """This is the albedo base color

"""
                        hidden = false
                        renderType = "color"
                    )
                }
            }

            over "IMac_Body"
            {
                over "IMac_Body"
                {
                    color3f inputs:diffuse_color_constant = (0.3400576, 0.3400542, 0.3400542) (
                        customData = {
                            float3 default = (0.2, 0.2, 0.2)
                        }
                        displayName = "Albedo Color"
                        doc = """This is the albedo base color

"""
                        hidden = false
                        renderType = "color"
                    )
                }
            }

            over "green_light_001"
            {
                over "green_light_001"
                {
                    color3f inputs:diffuse_color_constant = (0.18181972, 0.870317, 0.10784908) (
                        customData = {
                            float3 default = (0.2, 0.2, 0.2)
                        }
                        displayName = "Albedo Color"
                        doc = """This is the albedo base color

"""
                        hidden = false
                        renderType = "color"
                    )
                }
            }

            over "green_light"
            {
                over "green_light"
                {
                    color3f inputs:diffuse_color_constant = (0.2427834, 0.8270893, 0.095341705) (
                        customData = {
                            float3 default = (0.2, 0.2, 0.2)
                        }
                        displayName = "Albedo Color"
                        doc = """This is the albedo base color

"""
                        hidden = false
                        renderType = "color"
                    )
                }
            }

            over "material_DModel_LowPoly"
            {
                over "material_DModel_LowPoly"
                {
                    asset inputs:diffuse_texture = @./textures/8K Upscaled box texture000.jpg@ (
                        customData = {
                            asset default = @@
                        }
                        hidden = false
                        renderType = "texture_2d"
                    )
                }
            }

            over "Material_003"
            {
                over "Material_003"
                {
                    asset inputs:diffuse_texture = @./textures/MetaTool.png@ (
                        customData = {
                            asset default = @@
                        }
                        hidden = false
                        renderType = "texture_2d"
                    )
                }
            }

            over "WB_Board"
            {
                over "WB_Board"
                {
                    float inputs:metallic_constant = 0.44 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Metallic Amount"
                        doc = """Metallic Material

"""
                        hidden = false
                    )
                    float inputs:reflection_roughness_constant = 0.25 (
                        customData = {
                            float default = 0.5
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Roughness Amount"
                        doc = """Higher roughness values lead to more blurry reflections

"""
                        hidden = false
                    )
                }
            }
        }

        over "Laboratorio_v2"
        {
            over "MouseThermaltakeBlack"
            {
                float3 xformOp:rotateXYZ = (0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -0.14951276363570998, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "MouseThermaltakeBlack_001"
            {
                float3 xformOp:rotateXYZ = (0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -0.14951276363570998, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "MouseThermaltakeBlack_002"
            {
                float3 xformOp:rotateXYZ = (0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -0.14951276363570998, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "MouseThermaltakeBlack_003"
            {
                float3 xformOp:rotateXYZ = (0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -0.14951276363570998, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "MouseThermaltakeBlack_0031"
            {
                float3 xformOp:rotateXYZ = (0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -0.14951276363570998, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "MouseThermaltakeBlack_0032"
            {
                float3 xformOp:rotateXYZ = (0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -0.14951276363570998, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "MouseThermaltakeBlack_0033"
            {
                float3 xformOp:rotateXYZ = (0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -0.14951276363570998, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "MouseThermaltakeBlack_004"
            {
                float3 xformOp:rotateXYZ = (0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -0.14951276363570998, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "MouseThermaltakeBlack_005"
            {
                float3 xformOp:rotateXYZ = (0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -0.14951276363570998, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "MouseThermaltakeBlack_007"
            {
                float3 xformOp:rotateXYZ = (0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -0.14951276363570998, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "MouseThermaltakeBlack_008"
            {
                float3 xformOp:rotateXYZ = (0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -0.14951276363570998, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "MouseThermaltakeBlack_009"
            {
                float3 xformOp:rotateXYZ = (0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -0.14951276363570998, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "MouseThermaltakeBlack_010"
            {
                float3 xformOp:rotateXYZ = (0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -0.14951276363570998, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "MouseThermaltakeBlack_011"
            {
                float3 xformOp:rotateXYZ = (0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -0.14951276363570998, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "MouseThermaltakeBlack_012"
            {
                float3 xformOp:rotateXYZ = (0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -0.14951276363570998, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "MouseThermaltakeBlack_013"
            {
                float3 xformOp:rotateXYZ = (0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -0.14951276363570998, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "MouseThermaltakeBlack_014"
            {
                float3 xformOp:rotateXYZ = (0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -0.14951276363570998, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "MouseThermaltakeBlack_015"
            {
                float3 xformOp:rotateXYZ = (0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -0.14951276363570998, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "MouseThermaltakeBlack_0151"
            {
                float3 xformOp:rotateXYZ = (0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -0.14951276363570998, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "MouseThermaltakeBlack_0152"
            {
                float3 xformOp:rotateXYZ = (0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -0.14951276363570998, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }
    }

    def Mesh "Plane"
    {
        float3[] extent = [(-50, 0, -50), (50, 0, 50)]
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 2, 3, 1]
        normal3f[] normals = [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
            interpolation = "faceVarying"
        )
        point3f[] points = [(-50, 0, -50), (50, 0, -50), (-50, 0, 50), (50, 0, 50)]
        texCoord2f[] primvars:st = [(0, 1), (0, 0), (1, 0), (1, 1)] (
            interpolation = "faceVarying"
        )
        uniform token subdivisionScheme = "none"
        double3 xformOp:rotateXYZ = (0, 0, 90)
        double3 xformOp:scale = (-0.68, 1, 1.2)
        double3 xformOp:translate = (710.499938964843, 215.1566162109373, -236.86129760742188)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def Mesh "Cube" (
        delete apiSchemas = ["OmniSceneVisualizationAPI"]
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        float3[] extent = [(-50, -50, -50), (50, 50, 50)]
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 3, 2, 4, 6, 7, 5, 6, 2, 3, 7, 4, 5, 1, 0, 4, 0, 2, 6, 5, 7, 3, 1]
        rel material:binding = </World/Looks/OmniPBR> (
            bindMaterialAs = "weakerThanDescendants"
        )
        normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0)] (
            interpolation = "faceVarying"
        )
        point3f[] points = [(-50, -50, 50), (50, -50, 50), (-50, 50, 50), (50, 50, 50), (-50, -50, -50), (50, -50, -50), (-50, 50, -50), (50, 50, -50)]
        texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0), (0, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0)] (
            interpolation = "faceVarying"
        )
        uniform token subdivisionScheme = "none"
        double3 xformOp:rotateXYZ = (0, 0, 0)
        double3 xformOp:scale = (7.473513368922488, 0.41229229354429625, 3.8)
        double3 xformOp:translate = (356.1935137624028, 359.56110998547365, -170.19029596391286)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def Scope "Looks"
    {
        def Material "OmniPBR"
        {
            token outputs:mdl:displacement.connect = </World/Looks/OmniPBR/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/OmniPBR/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/OmniPBR/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @./textures/Ceiling tiles.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                float2 inputs:texture_scale = (-14, -8) (
                    customData = {
                        float2 default = (1, 1)
                    }
                    displayGroup = "UV"
                    displayName = "Texture Tiling"
                    doc = """Controls the repetition of the texture.

"""
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
            }
        }
    }
}

def Xform "Environment"
{
    int ground:size = 1400
    string ground:type = "On"
    double3 xformOp:rotateXYZ = (0, 0, 0)
    double3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

    def DomeLight "Sky" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float inputs:colorTemperature = 6250
        bool inputs:enableColorTemperature = 1
        float inputs:exposure = 9
        float inputs:intensity = 1
        float inputs:shaping:cone:angle = 180
        float inputs:shaping:cone:softness
        float inputs:shaping:focus
        color3f inputs:shaping:focusTint
        asset inputs:shaping:ies:file
        asset inputs:texture:file = @https://omniverse-content-production.s3.us-west-2.amazonaws.com/Assets/Scenes/Templates/Default/SubUSDs/textures/CarLight_512x256.hdr@
        token inputs:texture:format = "latlong"
        token visibility = "inherited"
        double3 xformOp:rotateXYZ = (0, -90, -90)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (1.401298464324817e-44, 41.886821400865415, 222.65481047127813)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def DistantLight "DistantLight" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float inputs:angle = 2.5
        float inputs:colorTemperature = 7389.1
        bool inputs:enableColorTemperature = 1
        float inputs:exposure = 10
        float inputs:intensity = 1
        float inputs:shaping:cone:angle = 180
        float inputs:shaping:cone:softness
        float inputs:shaping:focus
        color3f inputs:shaping:focusTint
        asset inputs:shaping:ies:file
        token visibility = "inherited"
        double3 xformOp:rotateXYZ = (-143.3277439874333, 0, 0)
        double3 xformOp:scale = (24.035047261672627, 2.2258039158316834, 5.985225873215801)
        double3 xformOp:translate = (472.70427384471, 299.4613067632504, -516.0193017688227)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def Scope "Looks"
    {
        def Material "Grid"
        {
            token outputs:mdl:displacement.connect = </Environment/Looks/Grid/Shader.outputs:out>
            token outputs:mdl:surface.connect = </Environment/Looks/Grid/Shader.outputs:out>
            token outputs:mdl:volume.connect = </Environment/Looks/Grid/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                float inputs:albedo_add = 0 (
                    customData = {
                        float default = 0
                        dictionary soft_range = {
                            float max = 1
                            float min = -1
                        }
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Add"
                    doc = """Adds a constant value to the diffuse color 

"""
                    hidden = false
                )
                float inputs:albedo_brightness = 1 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Brightness"
                    doc = """Multiplier for the diffuse color 

"""
                    hidden = false
                )
                float inputs:albedo_desaturation = 0 (
                    customData = {
                        float default = 0
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Desaturation"
                    doc = """Desaturates the diffuse color

"""
                    hidden = false
                )
                color3f inputs:diffuse_color_constant = (1, 1, 0.99999) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Color"
                    doc = """This is the albedo base color

"""
                    hidden = false
                    renderType = "color"
                )
                asset inputs:diffuse_texture = @./textures/Grass.jpg@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                bool inputs:enable_emission = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = """Enables the emission of light from the material

"""
                    hidden = false
                )
                bool inputs:enable_opacity = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity"
                    doc = """Enables the use of cutout opacity

"""
                    hidden = false
                )
                bool inputs:project_uvw = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "UV"
                    displayName = "Enable Project UVW Coordinates"
                    doc = """When enabled, UV coordinates will be generated by projecting them from a coordinate system

"""
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.5 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = """Higher roughness values lead to more blurry reflections

"""
                    hidden = false
                )
                float inputs:texture_rotate = 0 (
                    customData = {
                        float default = 0
                    }
                    displayGroup = "UV"
                    displayName = "Texture Rotate"
                    doc = """Rotates angle of texture in degrees.

"""
                    hidden = false
                )
                float2 inputs:texture_scale = (1, 1) (
                    customData = {
                        float2 default = (1, 1)
                    }
                    displayGroup = "UV"
                    displayName = "Texture Tiling"
                    doc = """Controls the repetition of the texture.

"""
                    hidden = false
                )
                float2 inputs:texture_translate = (0, 0) (
                    customData = {
                        float2 default = (0, 0)
                    }
                    displayGroup = "UV"
                    displayName = "Texture Translate"
                    doc = """Controls position of texture.

"""
                    hidden = false
                )
                bool inputs:world_or_object = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "UV"
                    displayName = "Enable World Space"
                    doc = """When enabled, uses world space for projection, otherwise object space is used

"""
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
            }
        }
    }

    def Mesh "ground" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        float3[] extent = [(-1400, -1400, 0), (1400, 1400, 0)]
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 3, 2]
        rel material:binding = </Environment/Looks/Grid> (
            bindMaterialAs = "weakerThanDescendants"
        )
        normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
            interpolation = "faceVarying"
        )
        point3f[] points = [(-700, -700, 0), (700, -700, 0), (-700, 700, 0), (700, 700, 0)]
        bool primvars:isMatteObject = 0
        texCoord2f[] primvars:st = [(0, 0), (14, 0), (14, 14), (0, 14)] (
            interpolation = "faceVarying"
        )
        uniform token subdivisionScheme = "none"
        token visibility = "inherited"
        double3 xformOp:rotateXYZ = (0, -90, -90)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (390.21705515745776, -15.888787015304786, 1.3890918409832376e-43)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def Plane "groundCollider" (
        prepend apiSchemas = ["PhysicsCollisionAPI"]
    )
    {
        uniform token axis = "Y"
        uniform token purpose = "guide"
    }
}

def RectLight "RectLight" (
    prepend apiSchemas = ["ShapingAPI"]
)
{
    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
    float inputs:height = 100
    float inputs:intensity = 40000
    float inputs:shaping:cone:angle = 180
    float inputs:shaping:cone:softness
    float inputs:shaping:focus
    color3f inputs:shaping:focusTint
    asset inputs:shaping:ies:file
    float inputs:width = 100
    token visibility = "inherited"
    double3 xformOp:rotateXYZ = (0, 90, 90)
    double3 xformOp:scale = (0.3, 0.3, 0.3)
    double3 xformOp:translate = (105, 330.45592, -107.81936600040041)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
}

def RectLight "RectLight_01" (
    prepend apiSchemas = ["ShapingAPI"]
)
{
    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
    float inputs:height = 100
    float inputs:intensity = 40000
    float inputs:shaping:cone:angle = 180
    float inputs:shaping:cone:softness
    float inputs:shaping:focus
    color3f inputs:shaping:focusTint
    asset inputs:shaping:ies:file
    float inputs:width = 100
    token visibility = "inherited"
    double3 xformOp:rotateXYZ = (0, 90, 90)
    double3 xformOp:scale = (0.3, 0.3, 0.3)
    double3 xformOp:translate = (105, 338.45591587367466, -219.684702197877)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
}

def RectLight "RectLight_02" (
    prepend apiSchemas = ["ShapingAPI"]
)
{
    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
    float inputs:height = 100
    float inputs:intensity = 40000
    float inputs:shaping:cone:angle = 180
    float inputs:shaping:cone:softness
    float inputs:shaping:focus
    color3f inputs:shaping:focusTint
    asset inputs:shaping:ies:file
    float inputs:width = 100
    token visibility = "inherited"
    double3 xformOp:rotateXYZ = (0, 90, 90)
    double3 xformOp:scale = (0.3, 0.3, 0.3)
    double3 xformOp:translate = (240, 338.4559158736745, -107.81936600040048)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
}

def RectLight "RectLight_03" (
    prepend apiSchemas = ["ShapingAPI"]
)
{
    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
    float inputs:height = 100
    float inputs:intensity = 40000
    float inputs:shaping:cone:angle = 180
    float inputs:shaping:cone:softness
    float inputs:shaping:focus
    color3f inputs:shaping:focusTint
    asset inputs:shaping:ies:file
    float inputs:width = 100
    token visibility = "inherited"
    double3 xformOp:rotateXYZ = (0, 90, 90)
    double3 xformOp:scale = (0.3, 0.3, 0.3)
    double3 xformOp:translate = (240, 338.4559158736745, -219.6847)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
}

def RectLight "RectLight_04" (
    prepend apiSchemas = ["ShapingAPI"]
)
{
    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
    float inputs:height = 100
    float inputs:intensity = 40000
    float inputs:shaping:cone:angle = 180
    float inputs:shaping:cone:softness
    float inputs:shaping:focus
    color3f inputs:shaping:focusTint
    asset inputs:shaping:ies:file
    float inputs:width = 100
    token visibility = "inherited"
    double3 xformOp:rotateXYZ = (0, 90, 90)
    double3 xformOp:scale = (0.3, 0.3, 0.3)
    double3 xformOp:translate = (440, 338.4559158736745, -219.6847)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
}

def RectLight "RectLight_05" (
    prepend apiSchemas = ["ShapingAPI"]
)
{
    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
    float inputs:height = 100
    float inputs:intensity = 40000
    float inputs:shaping:cone:angle = 180
    float inputs:shaping:cone:softness
    float inputs:shaping:focus
    color3f inputs:shaping:focusTint
    asset inputs:shaping:ies:file
    float inputs:width = 100
    token visibility = "inherited"
    double3 xformOp:rotateXYZ = (0, 90, 90)
    double3 xformOp:scale = (0.3, 0.3, 0.3)
    double3 xformOp:translate = (440, 338.4559158736745, -107.81937)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
}

def RectLight "RectLight_06" (
    prepend apiSchemas = ["ShapingAPI"]
)
{
    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
    float inputs:height = 100
    float inputs:intensity = 40000
    float inputs:shaping:cone:angle = 180
    float inputs:shaping:cone:softness
    float inputs:shaping:focus
    color3f inputs:shaping:focusTint
    asset inputs:shaping:ies:file
    float inputs:width = 100
    token visibility = "inherited"
    double3 xformOp:rotateXYZ = (0, 90, 90)
    double3 xformOp:scale = (0.3, 0.3, 0.3)
    double3 xformOp:translate = (620, 338.4559158736745, -219.6847)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
}

def RectLight "RectLight_07" (
    prepend apiSchemas = ["ShapingAPI"]
)
{
    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
    float inputs:height = 100
    float inputs:intensity = 40000
    float inputs:shaping:cone:angle = 180
    float inputs:shaping:cone:softness
    float inputs:shaping:focus
    color3f inputs:shaping:focusTint
    asset inputs:shaping:ies:file
    float inputs:width = 100
    token visibility = "inherited"
    double3 xformOp:rotateXYZ = (0, 90, 90)
    double3 xformOp:scale = (0.3, 0.3, 0.3)
    double3 xformOp:translate = (620, 338.45591587367466, -107.81937)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
}

